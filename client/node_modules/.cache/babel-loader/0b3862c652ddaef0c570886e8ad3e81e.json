{"ast":null,"code":"import _classCallCheck from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import axios from'axios';import AddSpot from'../AddSpot/AddSpot';import MapGL,{Marker,GeolocateControl}from\"react-map-gl\";import Pin from\"../AddSpot/Pin\";import\"./SpotList.scss\";import DeckGL,{GeoJsonLayer}from\"deck.gl\";import Geocoder from\"react-map-gl-geocoder\";import MapboxGeocoder from'@mapbox/mapbox-gl-geocoder';import'@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';var SpotList=/*#__PURE__*/function(_Component){_inherits(SpotList,_Component);var _super=_createSuper(SpotList);function SpotList(){var _this;_classCallCheck(this,SpotList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={sunsets:[],viewport:{latitude:52.5200,longitude:13.4050,zoom:10,width:500,height:300,coordinates:\"\"},searchResultLayer:null};_this.mapRef=React.createRef();_this.handleOnResult=function(event){_this.setState({searchResultLayer:new GeoJsonLayer({id:\"search-result\",data:event.result.geometry,getFillColor:[255,0,0,128],getRadius:1000,pointRadiusMinPixels:10,pointRadiusMaxPixels:10})});};_this.geocoder=new MapboxGeocoder({accessToken:process.env.REACT_APP_MAPBOX_TOKEN// mapboxgl: mapboxgl\n});_this.componentDidMount=function(){_this.getData();// map.addControl(\n//   geocoder\n//   );\n};_this.getData=function(){axios.get('server/list').then(function(response){console.log(\"sunsets list:\",response.data);_this.setState({sunsets:response.data});console.log(_this.state);}).catch(function(err){console.log(\"error\",err);});};return _this;}_createClass(SpotList,[{key:\"render\",value:function render(){var _this2=this;var geolocateStyle={float:'left',margin:'15px',padding:'5px'};var _this$state=this.state,viewport=_this$state.viewport,searchResultLayer=_this$state.searchResultLayer;return/*#__PURE__*/React.createElement(\"div\",{className:\"list\"},/*#__PURE__*/React.createElement(\"h4\",null,\" List of Views next to the location \"),this.state.sunsets.map(function(sunset){return/*#__PURE__*/React.createElement(\"div\",{className:\"sunset-card\",key:sunset._id},/*#__PURE__*/React.createElement(\"table\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"img\",{className:\"sunset-list-img\",src:sunset.img[0],style:{width:\"100px\"},alt:\"pic\"}))),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(Link,{to:\"/spotdetails/\".concat(sunset._id)},\" \",/*#__PURE__*/React.createElement(\"div\",{className:\"sunset-title-list\"},sunset.title))),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(Link,{to:\"/spotdetails/\".concat(sunset._id)},\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"part\",variant:\"danger\"},\"See details\"))))));}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(MapGL,Object.assign({ref:this.mapRef},this.state.viewport,{mapboxApiAccessToken:process.env.REACT_APP_MAPBOX_TOKEN,mapStyle:\"mapbox://styles/paolagaray/ckd0bdux30v981ilig8zxzd8p\",onViewportChange:function onViewportChange(viewport){return _this2.setState({viewport:viewport});}}),/*#__PURE__*/React.createElement(GeolocateControl,{style:geolocateStyle,positionOptions:{enableHighAccuracy:true},trackUserLocation:true}),/*#__PURE__*/React.createElement(Geocoder,{mapRef:this.mapRef,onResult:this.handleOnResult,onViewportChange:function onViewportChange(viewport){return _this2.setState({viewport:viewport});},mapboxApiAccessToken:process.env.REACT_APP_MAPBOX_TOKEN,position:\"top-right\"}),this.state.sunsets.map(function(sunset){return/*#__PURE__*/React.createElement(Marker,{key:sunset._id,longitude:sunset.longitude,latitude:sunset.latitude},/*#__PURE__*/React.createElement(Link,{to:\"/spotdetails/\".concat(sunset._id)},/*#__PURE__*/React.createElement(\"img\",{className:\"marker-btn-img\",src:sunset.img[0],alt:\"sunset icon\"})));})),/*#__PURE__*/React.createElement(Link,{to:\"/addSpot\"},\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"part\",variant:\"danger\"},\"Add a new sunset\")),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null));}}]);return SpotList;}(Component);export{SpotList as default};","map":{"version":3,"sources":["/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/src/components/SpotList/SpotList.js"],"names":["React","Component","Link","axios","AddSpot","MapGL","Marker","GeolocateControl","Pin","DeckGL","GeoJsonLayer","Geocoder","MapboxGeocoder","SpotList","state","sunsets","viewport","latitude","longitude","zoom","width","height","coordinates","searchResultLayer","mapRef","createRef","handleOnResult","event","setState","id","data","result","geometry","getFillColor","getRadius","pointRadiusMinPixels","pointRadiusMaxPixels","geocoder","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","componentDidMount","getData","get","then","response","console","log","catch","err","geolocateStyle","float","margin","padding","map","sunset","_id","img","title","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport AddSpot from '../AddSpot/AddSpot';\nimport MapGL, { Marker, GeolocateControl} from \"react-map-gl\";\nimport Pin from \"../AddSpot/Pin\";\nimport \"./SpotList.scss\";\n\n\nimport DeckGL, { GeoJsonLayer } from \"deck.gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\n\n\n\n import MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\n\n\nexport default class SpotList extends Component {\n  \n    state = {\n        sunsets: [],\n        viewport: {\n          latitude: 52.5200,\n          longitude: 13.4050,\n          zoom: 10,\n          width: 500,\n          height: 300,\n          coordinates:\"\",\n         },\n         searchResultLayer: null\n      };\n\n      mapRef = React.createRef();\n\n      handleOnResult = event => {\n        this.setState({\n          searchResultLayer: new GeoJsonLayer({\n            id: \"search-result\",\n            data: event.result.geometry,\n            getFillColor: [255, 0, 0, 128],\n            getRadius: 1000,\n            pointRadiusMinPixels: 10,\n            pointRadiusMaxPixels: 10\n          })\n        })\n      }\n\n      geocoder = new MapboxGeocoder({\n        accessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n       // mapboxgl: mapboxgl\n      });\n\n\n      componentDidMount = () => {\n        this.getData();\n\n\n        // map.addControl(\n        //   geocoder\n        //   );\n\n\n      };\n\n      getData = () => {\n        axios\n          .get('server/list')\n          .then(response => {\n              console.log(\"sunsets list:\",response.data)\n            this.setState({\n                sunsets: response.data,\n            });\n            console.log(this.state)\n          })\n          .catch(err => {\n            console.log(\"error\",err);\n          });\n      };\n\n    render() {\n      const geolocateStyle ={\n        float: 'left',\n        margin: '15px',\n        padding: '5px'\n      };\n\n      const { viewport, searchResultLayer} = this.state;\n\n    return(\n        <div className=\"list\">\n            <h4> List of Views next to the location </h4>\n                {this.state.sunsets.map(sunset => {\n                    return (\n                        <div className=\"sunset-card\" key={sunset._id}>\n                            <table>\n                                <tr>\n                                {/* showing only the first image of the sunset */}\n                                  <td>\n                                  <span><img className=\"sunset-list-img\" src={ sunset.img[0] } style={{width:\"100px\"}} alt=\"pic\"/></span>\n                                  </td>\n                                  <td>\n                                  <Link           \n                                     to={`/spotdetails/${sunset._id}`} > <div className=\"sunset-title-list\">{sunset.title}</div>\n                                  </Link>\n                                  </td>\n                                  <td>\n                                  <Link  to={`/spotdetails/${sunset._id}`}> <button className=\"part\" variant=\"danger\">See details</button></Link>\n                                  </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                })}\n\n                <br/>\n\n            <MapGL\n               ref={this.mapRef}\n                {...this.state.viewport}\n                mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN }\n                mapStyle=\"mapbox://styles/paolagaray/ckd0bdux30v981ilig8zxzd8p\"\n                onViewportChange={(viewport) => this.setState({viewport})}\n            >\n\n            <GeolocateControl\n                      style={geolocateStyle}\n                      positionOptions={{enableHighAccuracy: true}}\n                      trackUserLocation={true}\n                    />\n\n            <Geocoder \n                      mapRef={this.mapRef}\n                      onResult={this.handleOnResult}\n                      onViewportChange={(viewport) => this.setState({viewport})}\n                      mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN }\n                      position='top-right'\n              />\n            \n            {this.state.sunsets.map(sunset => \n                <Marker \n                  key={sunset._id}\n                  longitude={ sunset.longitude }\n                  latitude={ sunset.latitude }\n                  >\n                   {/* <Pin size={5} /> */}\n\n                   {/* <button class=\"marker-btn\">\n                    <img src = { sunset.img } alt=\"sunset icon\" />\n                   </button> */}\n                   \n                   <Link to={`/spotdetails/${sunset._id}`}>\n                   <img className=\"marker-btn-img\" src = { sunset.img[0] } alt=\"sunset icon\" />\n                  </Link>\n                </Marker>\n            )} \n            \n            </MapGL>\n                <Link  to ='/addSpot'> <button className=\"part\" variant=\"danger\">Add a new sunset</button></Link>\n            <br/><br/>\n\n        </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}