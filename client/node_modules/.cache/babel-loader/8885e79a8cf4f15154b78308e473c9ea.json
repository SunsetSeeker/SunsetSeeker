{"ast":null,"code":"import _classCallCheck from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import axios from'axios';import AddComment from'../AddComment/AddComment';var CommentList=/*#__PURE__*/function(_Component){_inherits(CommentList,_Component);var _super=_createSuper(CommentList);function CommentList(){var _this;_classCallCheck(this,CommentList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={comments:[],message:\"\"};_this.componentDidMount=function(){_this.getData();};_this.getData=function(){axios.get(\"/server/commentlist/\".concat(_this.props.spotId)).then(function(response){console.log(\"teste teste\",response);if(response.data.length==0){_this.setState({message:\"no comments\"});}else{_this.setState({comments:response.data});}}).catch(function(err){console.log(\"error\",err);});};return _this;}_createClass(CommentList,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,this.state.message&&/*#__PURE__*/React.createElement(\"p\",null,this.state.message),this.state.comments.map(function(comment){return/*#__PURE__*/React.createElement(\"p\",{key:comment._id},comment.text);}));}}]);return CommentList;}(Component);export{CommentList as default};","map":{"version":3,"sources":["/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/src/components/CommentList/CommentList.js"],"names":["React","Component","Link","axios","AddComment","CommentList","state","comments","message","componentDidMount","getData","get","props","spotId","then","response","console","log","data","length","setState","catch","err","map","comment","_id","text"],"mappings":"owBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,C,GAEqBC,CAAAA,W,+UAEjBC,K,CAAQ,CACJC,QAAQ,CAAE,EADN,CAEJC,OAAO,CAAE,EAFL,C,OAKNC,iB,CAAoB,UAAM,CACxB,MAAKC,OAAL,GACD,C,OAEDA,O,CAAU,UAAM,CAEdP,KAAK,CACFQ,GADH,+BAC8B,MAAKC,KAAL,CAAWC,MADzC,GAEGC,IAFH,CAEQ,SAAAC,QAAQ,CAAI,CACdC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA0BF,QAA1B,EACA,GAAGA,QAAQ,CAACG,IAAT,CAAcC,MAAd,EAAwB,CAA3B,CAA8B,CAC5B,MAAKC,QAAL,CAAc,CACZZ,OAAO,CAAE,aADG,CAAd,EAGD,CAJD,IAIO,CACL,MAAKY,QAAL,CAAc,CACZb,QAAQ,CAAEQ,QAAQ,CAACG,IADP,CAAd,EAGD,CACJ,CAbH,EAcGG,KAdH,CAcS,SAAAC,GAAG,CAAI,CACZN,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAoBK,GAApB,EACD,CAhBH,EAiBD,C,8EAEK,CACP,mBACE,+BACE,KAAKhB,KAAL,CAAWE,OAAX,eAAsB,6BAAI,KAAKF,KAAL,CAAWE,OAAf,CADxB,CAEG,KAAKF,KAAL,CAAWC,QAAX,CAAoBgB,GAApB,CAAwB,SAAAC,OAAO,CAAI,CACnC,mBACE,yBAAG,GAAG,CAAEA,OAAO,CAACC,GAAhB,EAAsBD,OAAO,CAACE,IAA9B,CADF,CAGD,CAJC,CAFH,CADF,CAWD,C,yBA5CqCzB,S,SAApBI,W","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport AddComment from '../AddComment/AddComment';\n\nexport default class CommentList extends Component {\n\n    state = {\n        comments: [],\n        message: \"\",\n      };\n    \n      componentDidMount = () => {\n        this.getData();\n      };\n    \n      getData = () => {\n\n        axios\n          .get(`/server/commentlist/${this.props.spotId}`)\n          .then(response => {\n              console.log(\"teste teste\",response)\n              if(response.data.length == 0) {\n                this.setState({\n                  message: \"no comments\",\n              });\n              } else {\n                this.setState({\n                  comments: response.data,\n              });\n              }\n          })\n          .catch(err => {\n            console.log(\"error\",err);\n          });\n      };\n\n   render() {\n     return (\n       <div>\n        {this.state.message && <p>{this.state.message}</p>}\n        { this.state.comments.map(comment => {\n          return (\n            <p key={comment._id}>{comment.text}</p>\n          )\n        }) } \n      </div>\n     )\n\n   }\n}"]},"metadata":{},"sourceType":"module"}