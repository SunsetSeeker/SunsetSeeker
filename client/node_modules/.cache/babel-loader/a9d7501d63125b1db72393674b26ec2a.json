{"ast":null,"code":"import Feature from './feature';\nimport * as Constants from '../constants';\nimport hat from 'hat';\nimport MultiPoint from './point';\nimport MultiLineString from './line_string';\nimport MultiPolygon from './polygon';\nvar models = {\n  MultiPoint: MultiPoint,\n  MultiLineString: MultiLineString,\n  MultiPolygon: MultiPolygon\n};\n\nvar takeAction = function takeAction(features, action, path, lng, lat) {\n  var parts = path.split('.');\n  var idx = parseInt(parts[0], 10);\n  var tail = !parts[1] ? null : parts.slice(1).join('.');\n  return features[idx][action](tail, lng, lat);\n};\n\nvar MultiFeature = function MultiFeature(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n  delete this.coordinates;\n  this.model = models[geojson.geometry.type];\n  if (this.model === undefined) throw new TypeError(\"\".concat(geojson.geometry.type, \" is not a valid type\"));\n  this.features = this._coordinatesToFeatures(geojson.geometry.coordinates);\n};\n\nMultiFeature.prototype = Object.create(Feature.prototype);\n\nMultiFeature.prototype._coordinatesToFeatures = function (coordinates) {\n  var _this = this;\n\n  var Model = this.model.bind(this);\n  return coordinates.map(function (coords) {\n    return new Model(_this.ctx, {\n      id: hat(),\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        coordinates: coords,\n        type: _this.type.replace('Multi', '')\n      }\n    });\n  });\n};\n\nMultiFeature.prototype.isValid = function () {\n  return this.features.every(function (f) {\n    return f.isValid();\n  });\n};\n\nMultiFeature.prototype.setCoordinates = function (coords) {\n  this.features = this._coordinatesToFeatures(coords);\n  this.changed();\n};\n\nMultiFeature.prototype.getCoordinate = function (path) {\n  return takeAction(this.features, 'getCoordinate', path);\n};\n\nMultiFeature.prototype.getCoordinates = function () {\n  return JSON.parse(JSON.stringify(this.features.map(function (f) {\n    if (f.type === Constants.geojsonTypes.POLYGON) return f.getCoordinates();\n    return f.coordinates;\n  })));\n};\n\nMultiFeature.prototype.updateCoordinate = function (path, lng, lat) {\n  takeAction(this.features, 'updateCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.addCoordinate = function (path, lng, lat) {\n  takeAction(this.features, 'addCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.removeCoordinate = function (path) {\n  takeAction(this.features, 'removeCoordinate', path);\n  this.changed();\n};\n\nMultiFeature.prototype.getFeatures = function () {\n  return this.features;\n};\n\nexport default MultiFeature;","map":{"version":3,"sources":["/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/multi_feature.js"],"names":["Feature","Constants","hat","MultiPoint","MultiLineString","MultiPolygon","models","takeAction","features","action","path","lng","lat","parts","split","idx","parseInt","tail","slice","join","MultiFeature","ctx","geojson","call","coordinates","model","geometry","type","undefined","TypeError","_coordinatesToFeatures","prototype","Object","create","Model","bind","map","coords","id","geojsonTypes","FEATURE","properties","replace","isValid","every","f","setCoordinates","changed","getCoordinate","getCoordinates","JSON","parse","stringify","POLYGON","updateCoordinate","addCoordinate","removeCoordinate","getFeatures"],"mappings":"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","sourcesContent":["import Feature from './feature';\nimport * as Constants from '../constants';\nimport hat from 'hat';\n\nimport MultiPoint from './point';\nimport MultiLineString from './line_string';\nimport MultiPolygon from './polygon';\n\nconst models = {\n  MultiPoint,\n  MultiLineString,\n  MultiPolygon\n};\n\nconst takeAction = (features, action, path, lng, lat) => {\n  const parts = path.split('.');\n  const idx = parseInt(parts[0], 10);\n  const tail = (!parts[1]) ? null : parts.slice(1).join('.');\n  return features[idx][action](tail, lng, lat);\n};\n\nconst MultiFeature = function(ctx, geojson) {\n  Feature.call(this, ctx, geojson);\n\n  delete this.coordinates;\n  this.model = models[geojson.geometry.type];\n  if (this.model === undefined) throw new TypeError(`${geojson.geometry.type} is not a valid type`);\n  this.features = this._coordinatesToFeatures(geojson.geometry.coordinates);\n};\n\nMultiFeature.prototype = Object.create(Feature.prototype);\n\nMultiFeature.prototype._coordinatesToFeatures = function(coordinates) {\n  const Model = this.model.bind(this);\n  return coordinates.map(coords => new Model(this.ctx, {\n    id: hat(),\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      coordinates: coords,\n      type: this.type.replace('Multi', '')\n    }\n  }));\n};\n\nMultiFeature.prototype.isValid = function() {\n  return this.features.every(f => f.isValid());\n};\n\nMultiFeature.prototype.setCoordinates = function(coords) {\n  this.features = this._coordinatesToFeatures(coords);\n  this.changed();\n};\n\nMultiFeature.prototype.getCoordinate = function(path) {\n  return takeAction(this.features, 'getCoordinate', path);\n};\n\nMultiFeature.prototype.getCoordinates = function() {\n  return JSON.parse(JSON.stringify(this.features.map((f) => {\n    if (f.type === Constants.geojsonTypes.POLYGON) return f.getCoordinates();\n    return f.coordinates;\n  })));\n};\n\nMultiFeature.prototype.updateCoordinate = function(path, lng, lat) {\n  takeAction(this.features, 'updateCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.addCoordinate = function(path, lng, lat) {\n  takeAction(this.features, 'addCoordinate', path, lng, lat);\n  this.changed();\n};\n\nMultiFeature.prototype.removeCoordinate = function(path) {\n  takeAction(this.features, 'removeCoordinate', path);\n  this.changed();\n};\n\nMultiFeature.prototype.getFeatures = function() {\n  return this.features;\n};\n\nexport default MultiFeature;\n"]},"metadata":{},"sourceType":"module"}