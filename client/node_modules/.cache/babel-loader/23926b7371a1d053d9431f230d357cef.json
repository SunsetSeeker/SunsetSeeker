{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/src/components/SpotList/SpotList.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport AddSpot from '../AddSpot/AddSpot';\nimport MapGL, { Marker, GeolocateControl } from \"react-map-gl\";\nimport Pin from \"../AddSpot/Pin\";\nimport \"./SpotList.scss\";\nimport DeckGL, { GeoJsonLayer } from \"deck.gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nexport default class SpotList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sunsets: [],\n      viewport: {\n        latitude: 52.5200,\n        longitude: 13.4050,\n        zoom: 10,\n        width: 500,\n        height: 300,\n        coordinates: \"\"\n      },\n      searchResultLayer: null\n    };\n    this.mapRef = React.createRef();\n\n    this.handleOnResult = event => {\n      this.setState({\n        searchResultLayer: new GeoJsonLayer({\n          id: \"search-result\",\n          data: event.result.geometry,\n          getFillColor: [255, 0, 0, 128],\n          getRadius: 1000,\n          pointRadiusMinPixels: 10,\n          pointRadiusMaxPixels: 10\n        })\n      });\n    };\n\n    this.geocoder = new MapboxGeocoder({\n      accessToken: process.env.REACT_APP_MAPBOX_TOKEN // mapboxgl: mapboxgl\n\n    });\n\n    this.componentDidMount = () => {\n      this.getData(); // map.addControl(\n      //   geocoder\n      //   );\n    };\n\n    this.getData = () => {\n      axios.get('server/list').then(response => {\n        console.log(\"sunsets list:\", response.data);\n        this.setState({\n          sunsets: response.data\n        });\n        console.log(this.state);\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    };\n  }\n\n  render() {\n    const geolocateStyle = {\n      float: 'left',\n      margin: '15px',\n      padding: '5px'\n    };\n    const {\n      viewport,\n      searchResultLayer\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \" List of Views next to the location \"), this.state.sunsets.map(sunset => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sunset-card\",\n        key: sunset._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"sunset-list-img\",\n        src: sunset.img[0],\n        style: {\n          width: \"100px\"\n        },\n        alt: \"pic\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 41\n        }\n      }))), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: `/spotdetails/${sunset._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 35\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sunset-title-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 74\n        }\n      }, sunset.title))), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: `/spotdetails/${sunset._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 35\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n        className: \"part\",\n        variant: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 77\n        }\n      }, \"See details\"))))));\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MapGL, Object.assign({\n      ref: this.mapRef\n    }, this.state.viewport, {\n      mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      mapStyle: \"mapbox://styles/paolagaray/ckd0bdux30v981ilig8zxzd8p\",\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Geocoder, {\n      mapRef: this.mapRef,\n      onResult: this.handleOnResult,\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      position: \"top-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }), this.state.sunsets.map(sunset => /*#__PURE__*/React.createElement(Marker, {\n      key: sunset._id,\n      longitude: sunset.longitude,\n      latitude: sunset.latitude,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/spotdetails/${sunset._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"marker-btn-img\",\n      src: sunset.img[0],\n      alt: \"sunset icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 20\n      }\n    }))))), /*#__PURE__*/React.createElement(Link, {\n      to: \"/addSpot\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"part\",\n      variant: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 40\n      }\n    }, \"Add a new sunset\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/gabrielmaldonadopalladini/Desktop/Ironhack/Project3/SunsetSeeker/client/src/components/SpotList/SpotList.js"],"names":["React","Component","Link","axios","AddSpot","MapGL","Marker","GeolocateControl","Pin","DeckGL","GeoJsonLayer","Geocoder","MapboxGeocoder","SpotList","state","sunsets","viewport","latitude","longitude","zoom","width","height","coordinates","searchResultLayer","mapRef","createRef","handleOnResult","event","setState","id","data","result","geometry","getFillColor","getRadius","pointRadiusMinPixels","pointRadiusMaxPixels","geocoder","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","componentDidMount","getData","get","then","response","console","log","catch","err","render","geolocateStyle","float","margin","padding","map","sunset","_id","img","title","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport AddSpot from '../AddSpot/AddSpot';\nimport MapGL, { Marker, GeolocateControl} from \"react-map-gl\";\nimport Pin from \"../AddSpot/Pin\";\nimport \"./SpotList.scss\";\n\n\nimport DeckGL, { GeoJsonLayer } from \"deck.gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\n\n\n\n import MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\n\n\nexport default class SpotList extends Component {\n  \n    state = {\n        sunsets: [],\n        viewport: {\n          latitude: 52.5200,\n          longitude: 13.4050,\n          zoom: 10,\n          width: 500,\n          height: 300,\n          coordinates:\"\",\n         },\n         searchResultLayer: null\n      };\n\n      mapRef = React.createRef();\n\n      handleOnResult = event => {\n        this.setState({\n          searchResultLayer: new GeoJsonLayer({\n            id: \"search-result\",\n            data: event.result.geometry,\n            getFillColor: [255, 0, 0, 128],\n            getRadius: 1000,\n            pointRadiusMinPixels: 10,\n            pointRadiusMaxPixels: 10\n          })\n        })\n      }\n\n      geocoder = new MapboxGeocoder({\n        accessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n       // mapboxgl: mapboxgl\n      });\n\n\n      componentDidMount = () => {\n        this.getData();\n\n\n        // map.addControl(\n        //   geocoder\n        //   );\n\n\n      };\n\n      getData = () => {\n        axios\n          .get('server/list')\n          .then(response => {\n              console.log(\"sunsets list:\",response.data)\n            this.setState({\n                sunsets: response.data,\n            });\n            console.log(this.state)\n          })\n          .catch(err => {\n            console.log(\"error\",err);\n          });\n      };\n\n    render() {\n      const geolocateStyle ={\n        float: 'left',\n        margin: '15px',\n        padding: '5px'\n      };\n\n      const { viewport, searchResultLayer} = this.state;\n\n    return(\n        <div className=\"list\">\n            <h4> List of Views next to the location </h4>\n                {this.state.sunsets.map(sunset => {\n                    return (\n                        <div className=\"sunset-card\" key={sunset._id}>\n                            <table>\n                                <tr>\n                                {/* showing only the first image of the sunset */}\n                                  <td>\n                                  <span><img className=\"sunset-list-img\" src={ sunset.img[0] } style={{width:\"100px\"}} alt=\"pic\"/></span>\n                                  </td>\n                                  <td>\n                                  <Link           \n                                     to={`/spotdetails/${sunset._id}`} > <div className=\"sunset-title-list\">{sunset.title}</div>\n                                  </Link>\n                                  </td>\n                                  <td>\n                                  <Link  to={`/spotdetails/${sunset._id}`}> <button className=\"part\" variant=\"danger\">See details</button></Link>\n                                  </td>\n                                </tr>\n                            </table>\n                        </div>\n                    );\n                })}\n\n                <br/>\n\n            <MapGL\n               ref={this.mapRef}\n                {...this.state.viewport}\n                mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN }\n                mapStyle=\"mapbox://styles/paolagaray/ckd0bdux30v981ilig8zxzd8p\"\n                onViewportChange={(viewport) => this.setState({viewport})}\n            >\n\n            <GeolocateControl\n                      style={geolocateStyle}\n                      positionOptions={{enableHighAccuracy: true}}\n                      trackUserLocation={true}\n                    />\n\n            <Geocoder \n                      mapRef={this.mapRef}\n                      onResult={this.handleOnResult}\n                      onViewportChange={(viewport) => this.setState({viewport})}\n                      mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN }\n                      position='top-right'\n              />\n            \n            {this.state.sunsets.map(sunset => \n                <Marker \n                  key={sunset._id}\n                  longitude={ sunset.longitude }\n                  latitude={ sunset.latitude }\n                  >\n                   {/* <Pin size={5} /> */}\n\n                   {/* <button class=\"marker-btn\">\n                    <img src = { sunset.img } alt=\"sunset icon\" />\n                   </button> */}\n                   \n                   <Link to={`/spotdetails/${sunset._id}`}>\n                   <img className=\"marker-btn-img\" src = { sunset.img[0] } alt=\"sunset icon\" />\n                  </Link>\n                </Marker>\n            )} \n            \n            </MapGL>\n                <Link  to ='/addSpot'> <button className=\"part\" variant=\"danger\">Add a new sunset</button></Link>\n            <br/><br/>\n\n        </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}